# -*- coding: utf-8 -*-
"""클로바X스튜디오_Summary.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ALL0g0yoJI_AJv1Fh5cabcN8f5ROzJgh
"""

from google.colab import drive
drive.mount('/content/drive')

# 300자 이하로, 5개만 확인

import pandas as pd
import json
import http.client

class CompletionExecutor:
    def __init__(self, host, api_key, api_key_primary_val, request_id):
        self._host = host
        self._api_key = api_key
        self._api_key_primary_val = api_key_primary_val
        self._request_id = request_id

    def _send_request(self, completion_request):
        headers = {
            'Content-Type': 'application/json; charset=utf-8',
            'X-NCP-CLOVASTUDIO-API-KEY': self._api_key,
            'X-NCP-APIGW-API-KEY': self._api_key_primary_val,
            'X-NCP-CLOVASTUDIO-REQUEST-ID': self._request_id
        }

        conn = http.client.HTTPSConnection(self._host)
        conn.request('POST', '/testapp/v1/api-tools/summarization/v2/1dce3880ba404d99b9b0ec378d619870', json.dumps(completion_request), headers)
        response = conn.getresponse()
        result = json.loads(response.read().decode(encoding='utf-8'))
        conn.close()
        return result

    def execute(self, completion_request):
        res = self._send_request(completion_request)
        if res['status']['code'] == '20000':
            return res['result']['text']
        else:
            return f"Error: {res['status']['message']}"

if __name__ == '__main__':
    completion_executor = CompletionExecutor(
        host='clovastudio.apigw.ntruss.com',
        api_key='NTA0MjU2MWZlZTcxNDJiYyJMHWjyWPH1xxOOns//FCEv9a5ykBpcLWBYwWsr3lZ5',
        api_key_primary_val='86MAOcYO4FTl26KRIzE47ozcpFvr7SZiIaLPAt5k',
        request_id='8934ef81-8100-42e2-8fb1-7c93bbb369ef'
    )

    csv_file = '/content/drive/MyDrive/미래에셋/economy_articles.csv'

    try:
        df = pd.read_csv(csv_file, encoding='cp949')
        df = df.head(5)

        for index, row in df.iterrows():
            title = row['Title']
            content = row['Content']

            request_data = {
                "texts": [content],  # 기사의 내용을 직접 사용
                "segMinSize": 300,
                "includeAiFilters": True,
                "autoSentenceSplitter": True,
                "segCount": -1,
                "segMaxSize": 1000
            }

            response_text = completion_executor.execute(request_data)

            # 요약 결과가 300자를 넘을 경우 다시 요약
            while len(response_text) > 300:
                request_data['texts'] = [response_text]  # 이전 요약 결과를 입력으로 다시 요청
                response_text = completion_executor.execute(request_data)

            print(f"제목: {title}")
            print(f"요약 결과: {response_text}")
            print("=" * 50)

    except FileNotFoundError:
        print(f"파일을 찾을 수 없습니다: {csv_file}")
    except Exception as e:
        print(f"오류 발생: {str(e)}")

# 5개 요약 저장


import pandas as pd
import json
import http.client

class CompletionExecutor:
    def __init__(self, host, api_key, api_key_primary_val, request_id):
        self._host = host
        self._api_key = api_key
        self._api_key_primary_val = api_key_primary_val
        self._request_id = request_id

    def _send_request(self, completion_request):
        headers = {
            'Content-Type': 'application/json; charset=utf-8',
            'X-NCP-CLOVASTUDIO-API-KEY': self._api_key,
            'X-NCP-APIGW-API-KEY': self._api_key_primary_val,
            'X-NCP-CLOVASTUDIO-REQUEST-ID': self._request_id
        }

        conn = http.client.HTTPSConnection(self._host)
        conn.request('POST', '/testapp/v1/api-tools/summarization/v2/1dce3880ba404d99b9b0ec378d619870', json.dumps(completion_request), headers)
        response = conn.getresponse()
        result = json.loads(response.read().decode(encoding='utf-8'))
        conn.close()
        return result

    def execute(self, completion_request):
        res = self._send_request(completion_request)
        if res['status']['code'] == '20000':
            return res['result']['text']
        else:
            return f"Error: {res['status']['message']}"

if __name__ == '__main__':
    completion_executor = CompletionExecutor(
        host='clovastudio.apigw.ntruss.com',
        api_key='NTA0MjU2MWZlZTcxNDJiYyJMHWjyWPH1xxOOns//FCEv9a5ykBpcLWBYwWsr3lZ5',
        api_key_primary_val='86MAOcYO4FTl26KRIzE47ozcpFvr7SZiIaLPAt5k',
        request_id='8934ef81-8100-42e2-8fb1-7c93bbb369ef'
    )

    csv_file = '/content/drive/MyDrive/미래에셋/economy_articles.csv'
    output_file = '/content/drive/MyDrive/미래에셋/summary_results.csv'

    try:
        df = pd.read_csv(csv_file, encoding='cp949')
        df = df.head(5)  # 상위 5개 데이터만 선택

        results = []

        for index, row in df.iterrows():
            title = row['Title']
            content = row['Content']

            request_data = {
                "texts": [content],  # 기사의 내용을 직접 사용
                "segMinSize": 300,
                "includeAiFilters": True,
                "autoSentenceSplitter": True,
                "segCount": -1,
                "segMaxSize": 1000
            }

            response_text = completion_executor.execute(request_data)

            # 요약 결과가 300자를 넘을 경우 다시 요약
            while len(response_text) > 300:
                request_data['texts'] = [response_text]  # 이전 요약 결과를 입력으로 다시 요청
                response_text = completion_executor.execute(request_data)

            results.append({'Title': title, 'Summary': response_text})

        # 결과를 DataFrame으로 변환하여 CSV로 저장
        summary_df = pd.DataFrame(results)
        summary_df.to_csv(output_file, index=False, encoding='cp949')

        print(f"요약 결과가 {output_file}에 저장되었습니다.")

    except FileNotFoundError:
        print(f"파일을 찾을 수 없습니다: {csv_file}")
    except Exception as e:
        print(f"오류 발생: {str(e)}")

# 전체 요약, csv 파일 형태로 저장

import pandas as pd
import json
import http.client

class CompletionExecutor:
    def __init__(self, host, api_key, api_key_primary_val, request_id):
        self._host = host
        self._api_key = api_key
        self._api_key_primary_val = api_key_primary_val
        self._request_id = request_id

    def _send_request(self, completion_request):
        headers = {
            'Content-Type': 'application/json; charset=utf-8',
            'X-NCP-CLOVASTUDIO-API-KEY': self._api_key,
            'X-NCP-APIGW-API-KEY': self._api_key_primary_val,
            'X-NCP-CLOVASTUDIO-REQUEST-ID': self._request_id
        }

        conn = http.client.HTTPSConnection(self._host)
        conn.request('POST', '/testapp/v1/api-tools/summarization/v2/1dce3880ba404d99b9b0ec378d619870', json.dumps(completion_request), headers)
        response = conn.getresponse()
        result = json.loads(response.read().decode(encoding='utf-8'))
        conn.close()
        return result

    def execute(self, completion_request):
        res = self._send_request(completion_request)
        if res['status']['code'] == '20000':
            return res['result']['text']
        else:
            return f"Error: {res['status']['message']}"

if __name__ == '__main__':
    completion_executor = CompletionExecutor(
        host='clovastudio.apigw.ntruss.com',
        api_key='NTA0MjU2MWZlZTcxNDJiYyJMHWjyWPH1xxOOns//FCEv9a5ykBpcLWBYwWsr3lZ5',
        api_key_primary_val='86MAOcYO4FTl26KRIzE47ozcpFvr7SZiIaLPAt5k',
        request_id='8934ef81-8100-42e2-8fb1-7c93bbb369ef'
    )

    csv_file = '/content/drive/MyDrive/미래에셋/economy_articles.csv'
    output_file = '/content/drive/MyDrive/미래에셋/summary_results.csv'

    try:
        df = pd.read_csv(csv_file, encoding='cp949')
        results = []

        for index, row in df.iterrows():
            title = row['Title']
            content = row['Content']

            request_data = {
                "texts": [content],  # 기사의 내용을 직접 사용
                "segMinSize": 300,
                "includeAiFilters": True,
                "autoSentenceSplitter": True,
                "segCount": -1,
                "segMaxSize": 1000
            }

            response_text = completion_executor.execute(request_data)

            # 요약 결과가 300자를 넘을 경우 다시 요약
            while len(response_text) > 300:
                request_data['texts'] = [response_text]  # 이전 요약 결과를 입력으로 다시 요청
                response_text = completion_executor.execute(request_data)

            results.append({'Title': title, 'Summary': response_text})

        # 결과를 DataFrame으로 변환하여 CSV로 저장
        summary_df = pd.DataFrame(results)
        summary_df.to_csv(output_file, index=False, encoding='cp949')

        print(f"요약 결과가 {output_file}에 저장되었습니다.")

    except FileNotFoundError:
        print(f"파일을 찾을 수 없습니다: {csv_file}")
    except Exception as e:
        print(f"오류 발생: {str(e)}")